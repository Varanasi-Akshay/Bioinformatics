library(knitr)
opts_chunk$set(fig.align="center", fig.height=3, fig.width=4)
library(ggplot2)
theme_set(theme_bw(base_size=12))
# your R code goes here
head(msleep)
# your R code goes here
head(msleep)
ggplot(msleep,aes(x=bodywt,y=awake,color=vore))+geom_point()
head(msleep)
# your R code goes here
head(msleep)
ggplot(msleep,aes(x=bodywt,y=awake,color=vore))+geom_point()
ggplot(msleep,aes(x=brainwt,y=bodywt,color=vore))+geom_point()
# your R code goes here
head(msleep)
#ggplot(msleep,aes(x=bodywt,y=awake,color=vore))+geom_point()
ggplot(msleep,aes(x=brainwt,y=bodywt,color=vore))+geom_point()
# your R code goes here
head(msleep)
ggplot(msleep,aes(x=bodywt,y=awake,color=vore))+geom_point()+scale_x_log10()
#ggplot(msleep,aes(x=brainwt,y=bodywt,color=vore))+geom_point()
# your R code goes here
head(msleep)
ggplot(msleep,aes(x=bodywt,y=awake,color=vore))+geom_point()+scale_y_log10()+scale_x_log10()
#ggplot(msleep,aes(x=brainwt,y=bodywt,color=vore))+geom_point()
# your R code goes here
head(msleep)
ggplot(msleep,aes(x=bodywt,y=awake,color=vore))+geom_point()+scale_y_log10()#+scale_x_log10()
#ggplot(msleep,aes(x=brainwt,y=bodywt,color=vore))+geom_point()
# your R code goes here
head(msleep)
ggplot(msleep,aes(x=bodywt,y=awake,color=vore))+geom_point()+scale_x_log10()+scale_y_log10()
#ggplot(msleep,aes(x=brainwt,y=bodywt,color=vore))+geom_point()
# your R code goes here
head(msleep)
ggplot(msleep,aes(x=bodywt,y=awake,color=vore))+geom_point()+scale_x_log10()#+scale_y_log10()
#ggplot(msleep,aes(x=brainwt,y=bodywt,color=vore))+geom_point()
# your R code goes here
head(msleep)
ggplot(msleep,aes(x=bodywt,y=awake,color=vore))+geom_point()+scale_x_log10()#+scale_y_log10()
ggplot(msleep,aes(x=brainwt,y=bodywt,color=vore))+geom_point()+scale_x_log10()+scale_y_log10()
# your R code goes here
dat<-data.frame(c(1,2,4,3,4,5))
# your R code goes here
dat<-data.frame(c(1,2,4,3,4,5))
head(dat)
# your R code goes here
dat<-data.frame(1,2,4,3,4,5)
head(dat)
# your R code goes here
head(msleep)
ggplot(msleep,aes(x=bodywt,y=awake,color=vore))+geom_point()+scale_x_log10()#+scale_y_log10()
ggplot(msleep,aes(x=brainwt,y=bodywt,color=vore))+geom_point()#+scale_x_log10()+scale_y_log10()
# your R code goes here
head(msleep)
ggplot(msleep,aes(x=bodywt,y=awake,color=vore))+geom_point()+scale_x_log10()#+scale_y_log10()
ggplot(msleep,aes(x=brainwt,y=bodywt,color=vore))+geom_point()+scale_x_log10()+scale_y_log10()
# your R code goes here
head(msleep)
ggplot(msleep,aes(x=bodywt,y=awake,color=vore))+geom_point()+scale_x_log10()+scale_y_log10()
ggplot(msleep,aes(x=brainwt,y=bodywt,color=vore))+geom_point()+scale_x_log10()+scale_y_log10()
# your R code goes here
head(msleep)
ggplot(msleep,aes(x=bodywt,y=awake,color=vore))+geom_point()+scale_x_log10()#+scale_y_log10()
ggplot(msleep,aes(x=brainwt,y=bodywt,color=vore))+geom_point()+scale_x_log10()+scale_y_log10()
# your R code goes here
head(msleep)
ggplot(msleep,aes(x=bodywt,y=awake,color=vore))+geom_point()#+scale_x_log10()#+scale_y_log10()
ggplot(msleep,aes(x=brainwt,y=bodywt,color=vore))+geom_point()+scale_x_log10()+scale_y_log10()
# your R code goes here
head(msleep)
ggplot(msleep,aes(x=bodywt,y=awake,color=vore))+geom_point()+scale_x_log10()#+scale_y_log10()
ggplot(msleep,aes(x=brainwt,y=bodywt,color=vore))+geom_point()+scale_x_log10()+scale_y_log10()
# your R code goes here
dat<-data.frame(c(1,2,3,4,5),c(10,30,20,40,60))
head(dat)
# your R code goes here
dat<-data.frame(x=c(1,2,3,4,5),y=c(10,30,20,40,60))
head(dat)
# your R code goes here
dat<-data.frame(x=c(1,2,3,4,5),y=c(10,30,20,40,60))
head(dat)
ggplot(dat,aes(x=x,y=y))+geom_path()
# your R code goes here
dat<-data.frame(x=c(1,2,3,4,5),y=c(10,30,20,40,60))
head(dat)
ggplot(dat,aes(x=x,y=y))+geom_path()
ggplot(dat,aes(x=x,y=y))+geom_line()
# your R code goes here
dat<-data.frame(x=c(1,3,6,4,5),y=c(10,30,20,40,60))
head(dat)
ggplot(dat,aes(x=x,y=y))+geom_path()
ggplot(dat,aes(x=x,y=y))+geom_line()
Cars93 <- read.csv("http://wilkelab.org/classes/SDS348/data_sets/Cars93.csv")
head(Cars93)
# R code goes here
ggplot(Cars93,aes(x=Price,y=MPG.city))+geom_point()
# R code goes here
ggplot(Cars93,aes(x=Price,y=MPG.city))+geom_point()+geom_smooth()
ggplot(Cars93,aes(x=Type,y=Origin))+geom_bar()
ggplot(Cars93,aes(x=Origin))+geom_bar()
ggplot(Cars93,aes(x=Origin,y=Type))+geom_bar()
ggplot(Cars93,aes(x=Origin))+geom_bar(aes(y=Type))
ggplot(Cars93,aes(x=Origin,fill=Type))+geom_bar()
ggplot(Cars93,aes(x=Origin))+geom_bar()
ggplot(Cars93,aes(x=Origin,fill=Type))+geom_bar()
ggplot(Cars93,aes(y=Fuel.tank.capacity))+geom_histogram()
ggplot(Cars93,aes(x=Fuel.tank.capacity))+geom_histogram()
ggplot(Cars93,aes(x=Fuel.tank.capacity))+geom_histogram()
ggplot(Cars93,aes(x=Fuel.tank.capacity))+geom_density()
# Histogram
ggplot(Cars93,aes(x=Fuel.tank.capacity))+geom_histogram()
# Density
ggplot(Cars93,aes(x=Fuel.tank.capacity))+geom_density()
ggplot(Cars93,aes(x=Fuel.tank.capacity))+geom_area()
# Histogram
ggplot(Cars93,aes(x=Fuel.tank.capacity))+geom_histogram()
# Density
ggplot(Cars93,aes(x=Fuel.tank.capacity))+geom_density()
# Histogram
ggplot(Cars93,aes(x=Fuel.tank.capacity))+geom_histogram()
# Density
ggplot(Cars93,aes(x=Fuel.tank.capacity))+geom_density()+geom_vline(aes(xintercept=mean(Fuel.tank.capacity)),
color="blue", linetype="dashed", size=1)
ggplot(iris,aes(x=Petal.Length,y=Sepal.Length))+geom_point()+geom_contour()
ggplot(iris,aes(x=Petal.Length,y=Sepal.Length))+geom_point()#+geom_contour()
ggplot(iris,aes(x=Sepal.Length,y=Petal.Length,color=Species))+geom_point()+geom_density2d()
ggplot(iris, aes(x=Sepal.Length, y=Petal.Length, color=Species)) + geom_point() + geom_smooth(aes(group=Species), method=lm, color='black', se=F)
# R code goes here.
cor.test(cars$speed, cars$dist)
plot(cars$speed, cars$dist)
library(MASS) # load the MASS library to make the data set available
head(cabbages)
# R code goes here.
fit<-lm(VitC~Cult+HeadWt,data=cabbages)
summary(fit)
anova(fit)
# R code goes here.
fit<-lm(VitC~Cult+HeadWt,data=cabbages)
summary(fit)
anova(fit)
d <- data.frame(Cult="c52", HeadWt=4) # make a data frame with 1 row
predict(fit, d) # run predict on previously fitted model with new data frame
residuals <- cabbages$VitC - predict(fit, cabbages)
residuals <- cabbages$VitC - predict(fit, cabbages)
plot(residuals, fit$residuals)
abline(0, 1)
d <- data.frame(Cult="c52", HeadWt=4) # make a data frame with 1 row
head(d)
predict(fit, d) # run predict on previously fitted model with new data frame
# R code goes here
iris$Species=="setosa"
setosa_sl<-iris$Sepal.Length[iris$Species=='setosa']
virginica_sl<-iris$Sepal.Length[iris$Species=='virginica']
t.test(setosa_sl,virginica_sl)
# R code goes here.
head(iris)
unique(iris$Species)
versicolor_sl<-iris$Sepal.Length[iris$Species=='versicolor']
?boxplot()
boxplot(setosa_sl,virginica_sl,versicolor_sl,names = c('setosa','virginica','versicolor'))
#easy way is
boxplot(iris$Sepal.Length ~ iris$Species,ylab="Sepal Length (cm)")
# R code goes here.
setosa <- iris[iris$Species=='setosa',]
versicolor <- iris[iris$Species=='versicolor',]
virginica <- iris[iris$Species=='virginica',]
plot(setosa$Sepal.Length, setosa$Petal.Length, pch=19, col='blue', xlim=c(3,8),
ylim=c(1,8), xlab = "Sepal Length (cm)", ylab = "Petal Length (cm)")
points(versicolor$Sepal.Length, versicolor$Petal.Length, pch=19, col='red')
points(virginica$Sepal.Length, virginica$Petal.Length, pch=19, col='green')
library(knitr)
opts_chunk$set(fig.align="center", fig.height=3, fig.width=4)
library(ggplot2)
theme_set(theme_bw(base_size=12))
library(dplyr)
AirPassengers
library(knitr)
opts_chunk$set(fig.align="center", fig.height=3, fig.width=4)
library(ggplot2)
theme_set(theme_bw(base_size=12))
library(dplyr)
data()
head(CO2)
#data()
head(Titanic)
#data()
head(ToothGrowth)
# download the sitka data set:
sitka <- read.csv("http://wilkelab.org/classes/SDS348/data_sets/sitka.csv")
head(sitka)
ggplot(sitka, aes(x=Time, y=size, group=tree)) + geom_line() + facet_wrap(~treat)
ggplot(sitka, aes(x=Time, y=size, group=tree)) + geom_line(aes(color=max(size)) + facet_wrap(~treat)
ggplot(sitka, aes(x=Time, y=size, group=tree)) + geom_line(aes(color=max(size))) + facet_wrap(~treat)
ggplot(sitka, aes(x=Time, y=size, group=tree)) + geom_line(aes(color=max(size,group = tree))) + facet_wrap(~treat)
library(nycflights13)
flights
sitka_grouped<-group_by(sitka, tree)
sitka_new<-mutate(sitka_grouped,max_size=max(size))
ggplot(sitka_new, aes(x=Time, y=size, group=tree)) + geom_line(aes(color=max_size)) + facet_wrap(~treat)
# R code goes here.
flights_filtered<-filter(flights,carrier=="UA" & arr_delay !=0)
flights_grouped<- group_by(flights_filtered, flight)
flight_summary<-summarize(flights_grouped,mean_delay=mean(arr_delay))
filter(flight_summary, mean_delay==max(mean_delay))
knitr::opts_chunk$set(echo = TRUE)
data$time<-1:length(data$X1)
knitr::opts_chunk$set(echo = TRUE)
## To read the data file
library("xlsx")
data<-read.xlsx("HW1_Problem1.xls",sheetIndex = 1, header=FALSE, stringsAsFactors=FALSE)
## Hardcoding to find those parameters
sum=0
sum_sq=0
mu=mean(data$X1)
var_data=0
## Before going forward to do the model fitting, we need to subtract the data by its mean
data$X1<-data$X1-mu
## Calculating Phi_1
for (i in 1:49) {
sum = sum + ((data$X1[i])*(data$X1[i+1]))
sum_sq = sum_sq+((data$X1[i]))^2 #*(data$X1[i]))
}
phi_1=sum/sum_sq
print(paste("The value of phi_1 is",prettyNum(phi_1)))
## Calculating variance of white noise and phi_1
for (i in 1:49) {
var_data=var_data+(data$X1[i+1]-phi_1*data$X1[i])^2
}
var_data=var_data/49
var_phi=var_data/sum_sq
print(paste("The value of variance of white noise is",prettyNum(var_data),"and that of phi_1 is",prettyNum(var_phi)))
## In built function to fit data in AR model with order 1
model<-ar.mle(x = data$X1, aic = FALSE, order.max = 1)
## Prints out co-efficient and variance value of white noise
model
data$time<-1:length(data$X1)
data$predict<-rep(0,length(data$X1))
#data_predicted<-data_frame()
#data$predict<-predict(model, data$X1)
#data$predict<-predict(model, data$X1, n.ahead = 1, se.fit = TRUE)
for (i in 1:49) {
data$predict[i+1]=data$X1[i]*phi_1
}
plot.ts(data$X1, lwd=2, col="Blue", xlab="Time", ylab="Data")
lines(x=data$time, y=data$predict, col='Red', lty=2 )
legend("topright", legend=c("Original", "Predicted"),
col=c("blue", "red"), lty=1:2, cex=0.8)
knitr::opts_chunk$set(echo = TRUE)
## To read the data file
library("xlsx")
data<-read.xlsx("HW1_Problem1.xls",sheetIndex = 1, header=FALSE, stringsAsFactors=FALSE)
## Hardcoding to find those parameters
sum=0
sum_sq=0
mu=mean(data$X1)
var_data=0
## Before going forward to do the model fitting, we need to subtract the data by its mean
data$X1<-data$X1-mu
## Calculating Phi_1
for (i in 1:49) {
sum = sum + ((data$X1[i])*(data$X1[i+1]))
sum_sq = sum_sq+((data$X1[i]))^2 #*(data$X1[i]))
}
phi_1=sum/sum_sq
print(paste("The value of phi_1 is",prettyNum(phi_1)))
## Calculating variance of white noise and phi_1
for (i in 1:49) {
var_data=var_data+(data$X1[i+1]-phi_1*data$X1[i])^2
}
var_data=var_data/49
var_phi=var_data/sum_sq
print(paste("The value of variance of white noise is",prettyNum(var_data),"and that of phi_1 is",prettyNum(var_phi)))
## In built function to fit data in AR model with order 1
model<-ar.mle(x = data$X1, aic = FALSE, order.max = 1)
## Prints out co-efficient and variance value of white noise
model
data$time<-1:length(data$X1)
data$predict<-rep(0,length(data$X1))
#data_predicted<-data_frame()
#data$predict<-predict(model, data$X1)
#data$predict<-predict(model, data$X1, n.ahead = 1, se.fit = TRUE)
for (i in 1:49) {
data$predict[i+1]=data$X1[i]*phi_1
}
plot.ts(data$X1, lwd=2, col="Blue", xlab="Time", ylab="Data")
lines(x=data$time, y=data$predict, col='Red', lty=2 )
legend("topright", legend=c("Original", "Predicted"),
col=c("blue", "red"), lty=1:2, cex=0.8)
## Reading the data
library("xlsx")
data<-read.xlsx("Retail_Sales_Data.xlsx",sheetIndex = 1, header=FALSE, stringsAsFactors=FALSE)
## Changing the column names for our convinience
colnames(data)<-c("Year","Month","Sales")
## Removing first 2 lines
data_sub<-data[3:length(data$Year), ]
## Converting the date and month to numbers
data_sub$Time<-c(1:length(data_sub$Sales))
## Creating a linear model relating Sales and time
model<-lm(data_sub$Sales~data_sub$Time)
summary(model)
## Plotting the model
plot(fitted(model),residuals(model))
## Predicted values
pre_variables<-predict(model,data=data_sub$Time)
## Plotting both original and predicted values
plot.ts(data_sub$Sales, lwd=2, col="Blue", xlab="Time", ylab="Sales")
lines(x=data_sub$Time, lwd=2, y=pre_variables, col='Red', lty=2)
legend("topleft", legend=c("Original", "Predicted"),
col=c("blue", "red"), lty=1:2, cex=0.8)
data_sub$Predicted<-pre_variables
data_sub$Resdiuals<-as.numeric(data_sub$Sales)-as.numeric(data_sub$Predicted)
# AR(2)
res<-ar.ols(x = data_sub$Resdiuals, aic = FALSE, order.max = 2)
res
# Residual Sum of squares
print(paste("The value of residual sum of squares for AR(2) is",prettyNum((length(data_sub$Year)-1)*res$var.pred)))
#data_sub$Resdiuals_pre<-predict(res,data_sub$Resdiuals)
#plot.ts(data_sub$Resdiuals)
#lines(x=data_sub$Time,y=data_sub$Resdiuals_pre)
# AR(4)
res_4<-ar.ols(x = data_sub$Resdiuals, aic = FALSE, order.max = 4)
res_4
# Residual Sum of squares
print(paste("The value of residual sum of squares for AR(4) is",prettyNum((length(data_sub$Year)-1)*res_4$var.pred)))
data_sub$Predicted<-pre_variables
data_sub$Resdiuals<-as.numeric(data_sub$Sales)-as.numeric(data_sub$Predicted)
# AR(2)
res<-ar.ols(x = data_sub$Resdiuals, aic = FALSE, order.max = 2)
res
# Residual Sum of squares
print(paste("The value of residual sum of squares for AR(2) is",prettyNum((length(data_sub$Year)-1)*res$var.pred)))
#data_sub$Resdiuals_pre<-predict(res,data_sub$Resdiuals)
#plot.ts(data_sub$Resdiuals)
#lines(x=data_sub$Time,y=data_sub$Resdiuals_pre)
# AR(4)
res_4<-ar.ols(x = data_sub$Resdiuals, aic = FALSE, order.max = 4)
res_4
# Residual Sum of squares
print(paste("The value of residual sum of squares for AR(4) is",prettyNum((length(data_sub$Year)-1)*res_4$var.pred)))
res_sum_sq=rep(0L,10)
for (i in seq(2,20,2)){
res<-ar.ols(x = data_sub$Resdiuals, aic = FALSE, order.max = i)
res_sum_sq[i/2]=res$var.pred*(length(data_sub$Year)-1)
}
res_sum<-data.frame(res_sum_sq)
#res_sum$res_sum_sq<-res_sum_sq
res_sum$model_num=seq(2,20,2)
library(ggplot2)
ggplot(res_sum,aes(x=res_sum$model_num, y=res_sum$res_sum_sq))+geom_point(aes(color = 'Red'),show.legend = FALSE)+geom_line(aes(color = 'green'),show.legend = FALSE)+xlab("Order")+ylab("Residual sum of squares")
