tally() -> premie_total
# total number of babies carried to term (known negatives)
pred_data %>%
filter(Premie == 0) %>%
tally() -> term_total
# true positive rate
tp <- premie_true$n / (premie_total$n)
# true negative rate
tn <- term_true$n / (term_total$n)
tp
# false positive rate (1 - true negative rate)
(1 - tn)
df1 <- data.frame(
predictor = predict(glm.out, NCbirths),
known_truth = NCbirths$Premie,
model = "model1"
)
# plot
# the aesthetic names are not the most intuitive
# `d` (disease) holds the known truth
# `m` (marker) holds the predictor values
p<-ggplot(df1, aes(d = known_truth, m = predictor, color = model)) +
geom_roc(n.cuts = 0) +
coord_fixed() +
scale_color_colorblind()
p
calc_auc(p)
# K-means clustering
NCbirths %>% select(Plural,BirthWeightGm,Gained) %>% kmeans(centers = 2) -> km
# K-means clustering
NCbirths %>% select(Plural,BirthWeightGm,Gained) %>% kmeans(centers = 2) -> km
km$cluster
# K-means clustering
NCbirths %>% select(Plural,BirthWeightGm,Gained) %>% kmeans(centers = 2) -> km
df_kmeans <- data.frame(
predictor = km$cluster,
known_truth = NCbirths$Premie,
model = "K-means"
)
# K-means clustering
NCbirths %>% select(Plural,BirthWeightGm,Gained) %>% kmeans(centers = 2) -> km
df_kmeans <- data.frame(
predictor = km$cluster,
known_truth = NCbirths$Premie,
model = "K-means"
)
p<-ggplot(df_kmeans, aes(d = known_truth, m = predictor, color = model)) +
geom_roc(n.cuts = 0) +
coord_fixed() +
scale_color_colorblind()
p
calc_auc(p)
data(txhousing)
data(txhousing)
library(ggplot2)
data(txhousing)
library(ggplot2)
data(txhousing)
head(txhousing)
data = read.csv("pd_speech_features.csv")
head(data)
cancer_data = read.table("breast-cancer-wisconsin.data", fileEncoding="UTF-16", dec=",")
#cancer_data = read.table("breast-cancer-wisconsin.data", fileEncoding="UTF-16", dec=",")
cancer_data = read.csv("breastcancer_data.csv")
head(cancer_data)
data = read.csv("pd_speech_features.csv",header = TRUE)
head(data)
library(knitr)
opts_chunk$set(fig.align = "center", fig.height = 5, fig.width = 6)
library(tidyverse)
theme_set(theme_bw(base_size = 12))
library(ggthemes)
data = read.csv("breastcancer_data.csv")
data = read.csv("breastcancer_data.csv")
head(data)
data = read.csv("breastcancer_data.csv")
data_cleaned = na.omit(data)
head(data)
head(data_cleaned)
data_cleaned = na.omit(data[:-1])
data_cleaned = na.omit(data(:-1))
data[:,:]
data[,]
data[,-1]
data[,-1]
length(data)
data = read.csv("breastcancer_data.csv")
data_cleaned = na.omit(data[c(-length(data))])
head(data_cleaned)
# Reading the data from csv file
data = read.csv("breastcancer_data.csv")
data_cleaned = na.omit(data[c(-length(data))])
cancer_data = data_cleaned[,1:12]
head(data_cleaned)
length(cancer_data)
cancer_data[,12]
head(cancer_data[,12])
colnames(cancer_data)
library(knitr)
opts_chunk$set(fig.align = "center", fig.height = 5, fig.width = 6)
library(tidyverse)
theme_set(theme_bw(base_size = 12))
library(ggthemes)
library(ggplot2)
library(plotROC)
# Reading the data from csv file
data = read.csv("breastcancer_data.csv")
# Removing NA values if any and removing last column which contains NAs
data_cleaned = na.omit(data[c(-length(data))])
# considering only mean values for the data analysis
cancer_data = data_cleaned[,1:12]
head(cancer_data)
train_fraction <- 0.5 # fraction of data for training purposes
set.seed(123) # set the seed to make the partition reproductible
train_size <- floor(train_fraction * nrow(cancer_data)) # number of observations in training set
train_indices <- sample(1:nrow(cancer_data), size = train_size)
train_data <- cancer_data[train_indices, ] # get training data
test_data <- cancer_data[-train_indices, ] # get test data
glm_out <- glm(
diagnosis ~ radius_mean + texture_mean + perimeter_mean + area_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + symmetry_mean + fractal_dimension_mean,
data = train_data,
family = binomial
) # family = binomial required for logistic regression
summary(glm_out)
glm_out <- glm(
diagnosis ~ radius_mean + texture_mean + perimeter_mean + area_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + symmetry_mean + fractal_dimension_mean,
data = train_data,
family = binomial
) # family = binomial required for logistic regression
summary(glm_out)
glm_out <- glm(
diagnosis ~ radius_mean + texture_mean + perimeter_mean + area_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + fractal_dimension_mean,
data = train_data,
family = binomial
) # family = binomial required for logistic regression
summary(glm_out)
glm_out <- glm(
diagnosis ~ radius_mean + texture_mean + perimeter_mean + area_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean,
data = train_data,
family = binomial
) # family = binomial required for logistic regression
summary(glm_out)
glm_out <- glm(
diagnosis ~ radius_mean + texture_mean + area_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean,
data = train_data,
family = binomial
) # family = binomial required for logistic regression
summary(glm_out)
glm_out <- glm(
diagnosis ~ radius_mean + texture_mean + area_mean + smoothness_mean + concavity_mean + concave.points_mean,
data = train_data,
family = binomial
) # family = binomial required for logistic regression
summary(glm_out)
glm_out <- glm(
diagnosis ~ radius_mean + texture_mean + area_mean + smoothness_mean + concave.points_mean,
data = train_data,
family = binomial
) # family = binomial required for logistic regression
summary(glm_out)
glm_out <- glm(
diagnosis ~ radius_mean + texture_mean + area_mean + smoothness_mean + concavity_mean + concave.points_mean,
data = train_data,
family = binomial
) # family = binomial required for logistic regression
summary(glm_out)
glm_out <- glm(
diagnosis ~ radius_mean + texture_mean + area_mean + smoothness_mean + concave.points_mean,
data = train_data,
family = binomial
) # family = binomial required for logistic regression
summary(glm_out)
glm_out <- glm(
diagnosis ~ texture_mean + area_mean + smoothness_mean + concave.points_mean,
data = train_data,
family = binomial
) # family = binomial required for logistic regression
summary(glm_out)
# diagnosis ~ texture_mean + area_mean + smoothness_mean + concave.points_mean
glm_out <- glm(
diagnosis ~ texture_mean + area_mean + smoothness_mean + concave.points_mean,
data = train_data,
family = binomial
) # family = binomial required for logistic regression
summary(glm_out)
# results data frame for training data
df_train <- data.frame(
predictor = predict(glm_out, train_data),
known_truth = train_data$diagnosis,
data_name = "training"
)
# results data frame for test data
df_test <- data.frame(
predictor = predict(glm_out, test_data),
known_truth = test_data$diagnosis,
data_name = "test"
)
df_combined <- rbind(df_train, df_test)
ggplot(df_combined, aes(d = known_truth, m = predictor, color = data_name)) +
geom_roc(n.cuts = 0) +
xlim(0, 0.15) +
scale_color_colorblind()
library(knitr)
opts_chunk$set(fig.align = "center", fig.height = 5, fig.width = 6)
library(tidyverse)
theme_set(theme_bw(base_size = 12))
library(ggthemes)
library(ggplot2)
library(plotROC)
# Reading the data from csv file
data = read.csv("breastcancer_data.csv")
# Removing NA values if any and removing last column which contains NAs
data_cleaned = na.omit(data[c(-length(data))])
# considering only mean values for the data analysis
cancer_data = data_cleaned[,1:12]
head(cancer_data)
train_fraction <- 0.5 # fraction of data for training purposes
#set.seed(123) # set the seed to make the partition reproductible
train_size <- floor(train_fraction * nrow(cancer_data)) # number of observations in training set
train_indices <- sample(1:nrow(cancer_data), size = train_size)
train_data <- cancer_data[train_indices, ] # get training data
test_data <- cancer_data[-train_indices, ] # get test data
glm_out <- glm(
diagnosis ~ radius_mean + texture_mean + perimeter_mean + area_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + symmetry_mean + fractal_dimension_mean,
data = train_data,
family = binomial
) # family = binomial required for logistic regression
summary(glm_out)
# diagnosis ~ texture_mean + area_mean + smoothness_mean + concave.points_mean
glm_out <- glm(
diagnosis ~ texture_mean + area_mean + smoothness_mean + concave.points_mean,
data = train_data,
family = binomial
) # family = binomial required for logistic regression
summary(glm_out)
# results data frame for training data
df_train <- data.frame(
predictor = predict(glm_out, train_data),
known_truth = train_data$diagnosis,
data_name = "training"
)
# results data frame for test data
df_test <- data.frame(
predictor = predict(glm_out, test_data),
known_truth = test_data$diagnosis,
data_name = "test"
)
df_combined <- rbind(df_train, df_test)
ggplot(df_combined, aes(d = known_truth, m = predictor, color = data_name)) +
geom_roc(n.cuts = 0) +
xlim(0, 0.15) +
scale_color_colorblind()
library(knitr)
opts_chunk$set(fig.align = "center", fig.height = 5, fig.width = 6)
library(tidyverse)
theme_set(theme_bw(base_size = 12))
library(ggthemes)
library(ggplot2)
library(plotROC)
# Reading the data from csv file
data = read.csv("breastcancer_data.csv")
# Removing NA values if any and removing last column which contains NAs
data_cleaned = na.omit(data[c(-length(data))])
# considering only mean values for the data analysis
cancer_data = data_cleaned[,1:12]
head(cancer_data)
train_fraction <- 0.5 # fraction of data for training purposes
set.seed(126) # set the seed to make the partition reproductible
train_size <- floor(train_fraction * nrow(cancer_data)) # number of observations in training set
train_indices <- sample(1:nrow(cancer_data), size = train_size)
train_data <- cancer_data[train_indices, ] # get training data
test_data <- cancer_data[-train_indices, ] # get test data
glm_out <- glm(
diagnosis ~ radius_mean + texture_mean + perimeter_mean + area_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + symmetry_mean + fractal_dimension_mean,
data = train_data,
family = binomial
) # family = binomial required for logistic regression
summary(glm_out)
# diagnosis ~ texture_mean + area_mean + smoothness_mean + concave.points_mean
glm_out <- glm(
diagnosis ~ texture_mean + area_mean + smoothness_mean + concave.points_mean,
data = train_data,
family = binomial
) # family = binomial required for logistic regression
summary(glm_out)
# results data frame for training data
df_train <- data.frame(
predictor = predict(glm_out, train_data),
known_truth = train_data$diagnosis,
data_name = "training"
)
# results data frame for test data
df_test <- data.frame(
predictor = predict(glm_out, test_data),
known_truth = test_data$diagnosis,
data_name = "test"
)
df_combined <- rbind(df_train, df_test)
ggplot(df_combined, aes(d = known_truth, m = predictor, color = data_name)) +
geom_roc(n.cuts = 0) +
xlim(0, 0.15) +
scale_color_colorblind()
p <- ggplot(df_combined, aes(d = known_truth, m = predictor, color = data_name)
) +
geom_roc(n.cuts = 0)
calc_auc(p)
data_name <- unique(df_combined$data_name)
data_info <- data.frame(
data_name,
group = order(data_name)
)
left_join(data_info, calc_auc(p)) %>%
select(-group, -PANEL) %>%
arrange(desc(AUC))
p <- ggplot(df_combined, aes(d = known_truth, m = predictor, color = data_name)
) +
geom_roc(n.cuts = 0)
data_name <- unique(df_combined$data_name)
data_info <- data.frame(
data_name,
group = order(data_name)
)
left_join(data_info, calc_auc(p)) %>%
select(-group, -PANEL) %>%
arrange(desc(AUC))
library(knitr)
opts_chunk$set(fig.align = "center", fig.height = 5, fig.width = 6)
library(tidyverse)
theme_set(theme_bw(base_size = 12))
library(ggthemes)
library(ggplot2)
library(plotROC)
# Reading the data from csv file
data = read.csv("breastcancer_data.csv")
# Removing NA values if any and removing last column which contains NAs
data_cleaned = na.omit(data[c(-length(data))])
# considering only mean values for the data analysis
cancer_data = data_cleaned[,1:12]
head(cancer_data)
train_fraction <- 0.5 # fraction of data for training purposes
set.seed(126) # set the seed to make the partition reproductible
train_size <- floor(train_fraction * nrow(cancer_data)) # number of observations in training set
train_indices <- sample(1:nrow(cancer_data), size = train_size)
train_data <- cancer_data[train_indices, ] # get training data
test_data <- cancer_data[-train_indices, ] # get test data
glm_out <- glm(
diagnosis ~ radius_mean + texture_mean + perimeter_mean + area_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + symmetry_mean + fractal_dimension_mean,
data = train_data,
family = binomial
) # family = binomial required for logistic regression
summary(glm_out)
# diagnosis ~ texture_mean + area_mean + smoothness_mean + concave.points_mean
glm_out <- glm(
diagnosis ~ texture_mean + area_mean + smoothness_mean + concave.points_mean,
data = train_data,
family = binomial
) # family = binomial required for logistic regression
summary(glm_out)
# results data frame for training data
df_train <- data.frame(
predictor = predict(glm_out, train_data),
known_truth = train_data$diagnosis,
data_name = "training"
)
# results data frame for test data
df_test <- data.frame(
predictor = predict(glm_out, test_data),
known_truth = test_data$diagnosis,
data_name = "test"
)
df_combined <- rbind(df_train, df_test)
ggplot(df_combined, aes(d = known_truth, m = predictor, color = data_name)) +
geom_roc(n.cuts = 0) +
scale_color_colorblind()
p <- ggplot(df_combined, aes(d = known_truth, m = predictor, color = data_name)
) +
geom_roc(n.cuts = 0)
data_name <- unique(df_combined$data_name)
data_info <- data.frame(
data_name,
group = order(data_name)
)
left_join(data_info, calc_auc(p)) %>%
select(-group, -PANEL) %>%
arrange(desc(AUC))
library(knitr)
opts_chunk$set(fig.align = "center", fig.height = 5, fig.width = 6)
library(tidyverse)
theme_set(theme_bw(base_size = 12))
library(ggthemes)
library(ggplot2)
library(plotROC)
# Reading the data from csv file
data = read.csv("breastcancer_data.csv")
# Removing NA values if any and removing last column which contains NAs
data_cleaned = na.omit(data[c(-length(data))])
# considering only mean values for the data analysis
cancer_data = data_cleaned[,1:12]
head(cancer_data)
train_fraction <- 0.5 # fraction of data for training purposes
set.seed(126) # set the seed to make the partition reproductible
train_size <- floor(train_fraction * nrow(cancer_data)) # number of observations in training set
train_indices <- sample(1:nrow(cancer_data), size = train_size)
train_data <- cancer_data[train_indices, ] # get training data
test_data <- cancer_data[-train_indices, ] # get test data
glm_out <- glm(
diagnosis ~ radius_mean + texture_mean + perimeter_mean + area_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + symmetry_mean + fractal_dimension_mean,
data = train_data,
family = binomial
) # family = binomial required for logistic regression
summary(glm_out)
# diagnosis ~ texture_mean + area_mean + smoothness_mean + concave.points_mean
glm_out <- glm(
diagnosis ~ texture_mean + area_mean + concave.points_mean,
data = train_data,
family = binomial
) # family = binomial required for logistic regression
summary(glm_out)
# results data frame for training data
df_train <- data.frame(
predictor = predict(glm_out, train_data),
known_truth = train_data$diagnosis,
data_name = "training"
)
# results data frame for test data
df_test <- data.frame(
predictor = predict(glm_out, test_data),
known_truth = test_data$diagnosis,
data_name = "test"
)
df_combined <- rbind(df_train, df_test)
ggplot(df_combined, aes(d = known_truth, m = predictor, color = data_name)) +
geom_roc(n.cuts = 0) +
scale_color_colorblind()
p <- ggplot(df_combined, aes(d = known_truth, m = predictor, color = data_name)
) +
geom_roc(n.cuts = 0)
data_name <- unique(df_combined$data_name)
data_info <- data.frame(
data_name,
group = order(data_name)
)
left_join(data_info, calc_auc(p)) %>%
select(-group, -PANEL) %>%
arrange(desc(AUC))
library(knitr)
opts_chunk$set(fig.align = "center", fig.height = 5, fig.width = 6)
library(tidyverse)
theme_set(theme_bw(base_size = 12))
library(ggthemes)
library(ggplot2)
library(plotROC)
# Reading the data from csv file
data = read.csv("breastcancer_data.csv")
# Removing NA values if any and removing last column which contains NAs
data_cleaned = na.omit(data[c(-length(data))])
# considering only mean values for the data analysis
cancer_data = data_cleaned[,1:12]
head(cancer_data)
train_fraction <- 0.5 # fraction of data for training purposes
set.seed(126) # set the seed to make the partition reproductible
train_size <- floor(train_fraction * nrow(cancer_data)) # number of observations in training set
train_indices <- sample(1:nrow(cancer_data), size = train_size)
train_data <- cancer_data[train_indices, ] # get training data
test_data <- cancer_data[-train_indices, ] # get test data
glm_out <- glm(
diagnosis ~ radius_mean + texture_mean + perimeter_mean + area_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + symmetry_mean + fractal_dimension_mean,
data = train_data,
family = binomial
) # family = binomial required for logistic regression
summary(glm_out)
# diagnosis ~ texture_mean + area_mean + smoothness_mean + concave.points_mean
glm_out <- glm(
diagnosis ~ texture_mean + area_mean + smoothness_mean + concave.points_mean,
data = train_data,
family = binomial
) # family = binomial required for logistic regression
summary(glm_out)
# results data frame for training data
df_train <- data.frame(
predictor = predict(glm_out, train_data),
known_truth = train_data$diagnosis,
data_name = "training"
)
# results data frame for test data
df_test <- data.frame(
predictor = predict(glm_out, test_data),
known_truth = test_data$diagnosis,
data_name = "test"
)
df_combined <- rbind(df_train, df_test)
ggplot(df_combined, aes(d = known_truth, m = predictor, color = data_name)) +
geom_roc(n.cuts = 0) +
scale_color_colorblind()
p <- ggplot(df_combined, aes(d = known_truth, m = predictor, color = data_name)
) +
geom_roc(n.cuts = 0)
data_name <- unique(df_combined$data_name)
data_info <- data.frame(
data_name,
group = order(data_name)
)
left_join(data_info, calc_auc(p)) %>%
select(-group, -PANEL) %>%
arrange(desc(AUC))
# diagnosis ~ texture_mean + area_mean + concave.points_mean
glm_out <- glm(
diagnosis ~ texture_mean + area_mean + concave.points_mean,
data = train_data,
family = binomial
) # family = binomial required for logistic regression
summary(glm_out)
